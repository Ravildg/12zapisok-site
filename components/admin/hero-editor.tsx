"use client"

import { useState, useEffect } from "react"

type HeroData = {
  title: string
  subtitle: string
  description: string
  image: string
}

const fallbackData: HeroData = {
  title: '–ö–≤–µ—Å—Ç-–∫–∞—Ñ–µ "12 –∑–∞–ø–∏—Å–æ–∫"',
  subtitle: "–ü–æ–≥—Ä—É–∑–∏ –∫–æ–º–∞–Ω–¥—É –≤ –∏–≥—Ä—É",
  description:
    "–ö–≤–µ—Å—Ç-—Å–ø–µ–∫—Ç–∞–∫–ª–∏ —Å –∂–∏–≤—ã–º–∏ –∞–∫—Ç—ë—Ä–∞–º–∏ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö. –ö–∞–∂–¥—ã–π —Å—é–∂–µ—Ç ‚Äî –∫–∞–∫ —Ñ–∏–ª—å–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –≥–ª–∞–≤–Ω—ã–µ –≥–µ—Ä–æ–∏. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Å—Ç—Ä–µ—á—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –≤—Å–ø–æ–º–∏–Ω–∞—Ç—å.",
  image: "/placeholder.svg",
}

export default function HeroEditor() {
  const [heroData, setHeroData] = useState<HeroData>(fallbackData)

  useEffect(() => {
    try {
      const saved = localStorage.getItem("heroData")
      if (saved) {
        const parsed = JSON.parse(saved)
        if (
          parsed &&
          typeof parsed === "object" &&
          parsed.title &&
          parsed.subtitle &&
          parsed.description
        ) {
          setHeroData(parsed)
        }
      }
    } catch (error) {
      console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ heroData:", error)
    }
  }, [])

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target
    setHeroData((prev) => ({ ...prev, [name]: value }))
  }

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onloadend = () => {
        setHeroData((prev) => ({ ...prev, image: reader.result as string }))
      }
      reader.readAsDataURL(file)
    }
  }

  const handleSave = () => {
    localStorage.setItem("heroData", JSON.stringify(heroData))
    alert("–ì–ª–∞–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
  }

  return (
    <div className="space-y-4">
      <div>
        <label className="block font-semibold mb-1">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
        <input
          type="text"
          name="title"
          value={heroData.title}
          onChange={handleChange}
          className="w-full border p-2 rounded"
        />
      </div>

      <div>
        <label className="block font-semibold mb-1">–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</label>
        <input
          type="text"
          name="subtitle"
          value={heroData.subtitle}
          onChange={handleChange}
          className="w-full border p-2 rounded"
        />
      </div>

      <div>
        <label className="block font-semibold mb-1">–û–ø–∏—Å–∞–Ω–∏–µ</label>
        <textarea
          name="description"
          value={heroData.description}
          onChange={handleChange}
          className="w-full border p-2 rounded"
          rows={4}
        />
      </div>

      <div>
        <label className="block font-semibold mb-1">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</label>
        <input type="file" accept="image/*" onChange={handleImageUpload} />
        {heroData.image && (
          <img
            src={heroData.image}
            alt="–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            className="mt-2 w-64 rounded shadow"
          />
        )}
      </div>

      <button
        onClick={handleSave}
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
      </button>
    </div>
  )
}
