"use client"

import { useEffect, useState } from "react"

type Step = {
  title: string
  description: string
}

export default function HowItWorksEditor() {
  const [steps, setSteps] = useState<Step[]>([])

  useEffect(() => {
    const saved = localStorage.getItem("howItWorksData")
    if (saved) {
      setSteps(JSON.parse(saved))
    } else {
      setSteps([
        {
          title: "–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å—é–∂–µ—Ç",
          description: "–ò–∑ –≤–æ—Å—å–º–∏ —è—Ä–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏–π —Å –∞–∫—Ç—ë—Ä–∞–º–∏.",
        },
        {
          title: "–ú—ã –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π",
          description: "–ü–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø–ª–æ—â–∞–¥–∫—É.",
        },
        {
          title: "–ò–≥—Ä–∞–µ–º!",
          description: "–í—ã ‚Äî –≥–µ—Ä–æ–∏, –∞ –º—ã –≤–µ–¥—ë–º –∑–∞ –∫—É–ª–∏—Å–∞–º–∏.",
        },
      ])
    }
  }, [])

  const handleChange = (index: number, field: keyof Step, value: string) => {
    const updated = [...steps]
    updated[index][field] = value
    setSteps(updated)
  }

  const addStep = () => {
    setSteps([...steps, { title: "", description: "" }])
  }

  const removeStep = (index: number) => {
    const updated = [...steps]
    updated.splice(index, 1)
    setSteps(updated)
  }

  const handleSave = () => {
    localStorage.setItem("howItWorksData", JSON.stringify(steps))
    alert("–†–∞–∑–¥–µ–ª ¬´–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
  }

  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-semibold">–†–µ–¥–∞–∫—Ç–æ—Ä: –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</h2>
      {steps.map((step, index) => (
        <div key={index} className="border p-4 rounded bg-white shadow space-y-2">
          <input
            type="text"
            placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞"
            value={step.title}
            onChange={(e) => handleChange(index, "title", e.target.value)}
            className="w-full border p-2 rounded"
          />
          <textarea
            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞"
            value={step.description}
            onChange={(e) => handleChange(index, "description", e.target.value)}
            className="w-full border p-2 rounded"
          />
          <button
            onClick={() => removeStep(index)}
            className="bg-red-500 text-white px-4 py-2 rounded"
          >
            –£–¥–∞–ª–∏—Ç—å —à–∞–≥
          </button>
        </div>
      ))}
      <button onClick={addStep} className="bg-blue-500 text-white px-4 py-2 rounded">
        ‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥
      </button>
      <button onClick={handleSave} className="bg-green-600 text-white px-6 py-2 rounded ml-2">
        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
      </button>
    </div>
  )
}
